// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package ethconfig

import (
	"github.com/ledgerwatch/erigon-lib/chain"
	"math/big"
	"starlink-world/erigon-evm/consensus/ethash"
	"starlink-world/erigon-evm/core/types"
	"starlink-world/erigon-evm/eth/gasprice/gaspricecfg"
	"starlink-world/erigon-evm/ethdb/prune"
	"starlink-world/erigon-evm/params"

	"github.com/c2h5oh/datasize"
	"github.com/ledgerwatch/erigon-lib/common"
	"github.com/ledgerwatch/erigon-lib/common/datadir"
	"github.com/ledgerwatch/erigon-lib/downloader/downloadercfg"
	"github.com/ledgerwatch/erigon-lib/txpool/txpoolcfg"
)

// MarshalTOML marshals as TOML.
func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Sync                           Sync
		Genesis                        *types.Genesis `toml:",omitempty"`
		NetworkID                      uint64
		EthDiscoveryURLs               []string
		P2PEnabled                     bool
		Prune                          prune.Mode
		BatchSize                      datasize.ByteSize
		ImportMode                     bool
		BadBlockHash                   common.Hash
		Snapshot                       Snapshot
		Downloader                     *downloadercfg.Cfg
		Dirs                           datadir.Dirs
		ExternalSnapshotDownloaderAddr string
		Whitelist                      map[uint64]common.Hash `toml:"-"`
		Miner                          params.MiningConfig
		Ethash                         ethash.Config
		Clique                         params.ConsensusSnapshotConfig
		Aura                           chain.AuRaConfig
		Bor                            chain.BorConfig
		DeprecatedTxPool               TxPoolConfig
		TxPool                         txpoolcfg.Config
		GPO                            gaspricecfg.Config
		RPCGasCap                      uint64  `toml:",omitempty"`
		RPCTxFeeCap                    float64 `toml:",omitempty"`
		StateStream                    bool
		EnabledIssuance                bool
		HistoryV3                      bool
		HeimdallURL                    string
		WithoutHeimdall                bool
		Ethstats                       string
		ExternalCL                     bool
		LightClientDiscoveryAddr       string
		LightClientDiscoveryPort       uint64
		LightClientDiscoveryTCPPort    uint64
		SentinelAddr                   string
		SentinelPort                   uint64
		OverrideShanghaiTime           *big.Int `toml:",omitempty"`
	}
	var enc Config
	enc.Sync = c.Sync
	enc.Genesis = c.Genesis
	enc.NetworkID = c.NetworkID
	enc.EthDiscoveryURLs = c.EthDiscoveryURLs
	enc.P2PEnabled = c.P2PEnabled
	enc.Prune = c.Prune
	enc.BatchSize = c.BatchSize
	enc.ImportMode = c.ImportMode
	enc.BadBlockHash = c.BadBlockHash
	enc.Snapshot = c.Snapshot
	enc.Downloader = c.Downloader
	enc.Dirs = c.Dirs
	enc.ExternalSnapshotDownloaderAddr = c.ExternalSnapshotDownloaderAddr
	enc.Whitelist = c.Whitelist
	enc.Miner = c.Miner
	enc.Ethash = c.Ethash
	enc.Clique = c.Clique
	enc.Aura = c.Aura
	enc.Bor = c.Bor
	enc.DeprecatedTxPool = c.DeprecatedTxPool
	enc.TxPool = c.TxPool
	enc.GPO = c.GPO
	enc.RPCGasCap = c.RPCGasCap
	enc.RPCTxFeeCap = c.RPCTxFeeCap
	enc.StateStream = c.StateStream
	enc.EnabledIssuance = c.EnabledIssuance
	enc.HistoryV3 = c.HistoryV3
	enc.HeimdallURL = c.HeimdallURL
	enc.WithoutHeimdall = c.WithoutHeimdall
	enc.Ethstats = c.Ethstats
	enc.ExternalCL = c.ExternalCL
	enc.LightClientDiscoveryAddr = c.LightClientDiscoveryAddr
	enc.LightClientDiscoveryPort = c.LightClientDiscoveryPort
	enc.LightClientDiscoveryTCPPort = c.LightClientDiscoveryTCPPort
	enc.SentinelAddr = c.SentinelAddr
	enc.SentinelPort = c.SentinelPort
	enc.OverrideShanghaiTime = c.OverrideShanghaiTime
	return &enc, nil
}

// UnmarshalTOML unmarshals from TOML.
func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Sync                           *Sync
		Genesis                        *types.Genesis `toml:",omitempty"`
		NetworkID                      *uint64
		EthDiscoveryURLs               []string
		P2PEnabled                     *bool
		Prune                          *prune.Mode
		BatchSize                      *datasize.ByteSize
		ImportMode                     *bool
		BadBlockHash                   *common.Hash
		Snapshot                       *Snapshot
		Downloader                     *downloadercfg.Cfg
		Dirs                           *datadir.Dirs
		ExternalSnapshotDownloaderAddr *string
		Whitelist                      map[uint64]common.Hash `toml:"-"`
		Miner                          *params.MiningConfig
		Ethash                         *ethash.Config
		Clique                         *params.ConsensusSnapshotConfig
		Aura                           *chain.AuRaConfig
		Bor                            *chain.BorConfig
		DeprecatedTxPool               *TxPoolConfig
		TxPool                         *txpoolcfg.Config
		GPO                            *gaspricecfg.Config
		RPCGasCap                      *uint64  `toml:",omitempty"`
		RPCTxFeeCap                    *float64 `toml:",omitempty"`
		StateStream                    *bool
		EnabledIssuance                *bool
		HistoryV3                      *bool
		HeimdallURL                    *string
		WithoutHeimdall                *bool
		Ethstats                       *string
		ExternalCL                     *bool
		LightClientDiscoveryAddr       *string
		LightClientDiscoveryPort       *uint64
		LightClientDiscoveryTCPPort    *uint64
		SentinelAddr                   *string
		SentinelPort                   *uint64
		OverrideShanghaiTime           *big.Int `toml:",omitempty"`
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Sync != nil {
		c.Sync = *dec.Sync
	}
	if dec.Genesis != nil {
		c.Genesis = dec.Genesis
	}
	if dec.NetworkID != nil {
		c.NetworkID = *dec.NetworkID
	}
	if dec.EthDiscoveryURLs != nil {
		c.EthDiscoveryURLs = dec.EthDiscoveryURLs
	}
	if dec.P2PEnabled != nil {
		c.P2PEnabled = *dec.P2PEnabled
	}
	if dec.Prune != nil {
		c.Prune = *dec.Prune
	}
	if dec.BatchSize != nil {
		c.BatchSize = *dec.BatchSize
	}
	if dec.ImportMode != nil {
		c.ImportMode = *dec.ImportMode
	}
	if dec.BadBlockHash != nil {
		c.BadBlockHash = *dec.BadBlockHash
	}
	if dec.Snapshot != nil {
		c.Snapshot = *dec.Snapshot
	}
	if dec.Downloader != nil {
		c.Downloader = dec.Downloader
	}
	if dec.Dirs != nil {
		c.Dirs = *dec.Dirs
	}
	if dec.ExternalSnapshotDownloaderAddr != nil {
		c.ExternalSnapshotDownloaderAddr = *dec.ExternalSnapshotDownloaderAddr
	}
	if dec.Whitelist != nil {
		c.Whitelist = dec.Whitelist
	}
	if dec.Miner != nil {
		c.Miner = *dec.Miner
	}
	if dec.Ethash != nil {
		c.Ethash = *dec.Ethash
	}
	if dec.Clique != nil {
		c.Clique = *dec.Clique
	}
	if dec.Aura != nil {
		c.Aura = *dec.Aura
	}
	if dec.Bor != nil {
		c.Bor = *dec.Bor
	}
	if dec.DeprecatedTxPool != nil {
		c.DeprecatedTxPool = *dec.DeprecatedTxPool
	}
	if dec.TxPool != nil {
		c.TxPool = *dec.TxPool
	}
	if dec.GPO != nil {
		c.GPO = *dec.GPO
	}
	if dec.RPCGasCap != nil {
		c.RPCGasCap = *dec.RPCGasCap
	}
	if dec.RPCTxFeeCap != nil {
		c.RPCTxFeeCap = *dec.RPCTxFeeCap
	}
	if dec.StateStream != nil {
		c.StateStream = *dec.StateStream
	}
	if dec.EnabledIssuance != nil {
		c.EnabledIssuance = *dec.EnabledIssuance
	}
	if dec.HistoryV3 != nil {
		c.HistoryV3 = *dec.HistoryV3
	}
	if dec.HeimdallURL != nil {
		c.HeimdallURL = *dec.HeimdallURL
	}
	if dec.WithoutHeimdall != nil {
		c.WithoutHeimdall = *dec.WithoutHeimdall
	}
	if dec.Ethstats != nil {
		c.Ethstats = *dec.Ethstats
	}
	if dec.ExternalCL != nil {
		c.ExternalCL = *dec.ExternalCL
	}
	if dec.LightClientDiscoveryAddr != nil {
		c.LightClientDiscoveryAddr = *dec.LightClientDiscoveryAddr
	}
	if dec.LightClientDiscoveryPort != nil {
		c.LightClientDiscoveryPort = *dec.LightClientDiscoveryPort
	}
	if dec.LightClientDiscoveryTCPPort != nil {
		c.LightClientDiscoveryTCPPort = *dec.LightClientDiscoveryTCPPort
	}
	if dec.SentinelAddr != nil {
		c.SentinelAddr = *dec.SentinelAddr
	}
	if dec.SentinelPort != nil {
		c.SentinelPort = *dec.SentinelPort
	}
	if dec.OverrideShanghaiTime != nil {
		c.OverrideShanghaiTime = dec.OverrideShanghaiTime
	}
	return nil
}
